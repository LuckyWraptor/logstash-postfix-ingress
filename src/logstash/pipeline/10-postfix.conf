# Version: 1.0.0
# Author: whyscream, LuckyWraptor
#
# Pattern matching configuration for most postfix log messages
#

filter {
  if "syslog_message" in [tags] {
    # grok log lines by program name (listed alpabetically)
    if [program] =~ /^postfix.*\/anvil$/ {
      grok {
        patterns_dir   => "/usr/share/logstash/patterns.d"
        match          => [ "message", "^%{POSTFIX_ANVIL}$" ]
        tag_on_failure => [ "_grok_postfix_anvil_nomatch" ]
        add_tag        => [ "_grok_postfix_success" ]
      }
    } else if [program] =~ /^postfix.*\/bounce$/ {
      grok {
        patterns_dir   => "/usr/share/logstash/patterns.d"
        match          => [ "message", "^%{POSTFIX_BOUNCE}$" ]
        tag_on_failure => [ "_grok_postfix_bounce_nomatch" ]
        add_tag        => [ "_grok_postfix_success" ]
      }
    } else if [program] =~ /^postfix.*\/cleanup$/ {
      grok {
        patterns_dir   => "/usr/share/logstash/patterns.d"
        match          => [ "message", "^%{POSTFIX_CLEANUP}$" ]
        tag_on_failure => [ "_grok_postfix_cleanup_nomatch" ]
        add_tag        => [ "_grok_postfix_success" ]
      }
    } else if [program] =~ /^postfix.*\/dnsblog$/ {
      grok {
        patterns_dir   => "/usr/share/logstash/patterns.d"
        match          => [ "message", "^%{POSTFIX_DNSBLOG}$" ]
        tag_on_failure => [ "_grok_postfix_dnsblog_nomatch" ]
        add_tag        => [ "_grok_postfix_success" ]
      }
    } else if [program] =~ /^postfix.*\/error$/ {
      grok {
        patterns_dir   => "/usr/share/logstash/patterns.d"
        match          => [ "message", "^%{POSTFIX_ERROR}$" ]
        tag_on_failure => [ "_grok_postfix_error_nomatch" ]
        add_tag        => [ "_grok_postfix_success" ]
      }
    } else if [program] =~ /^postfix.*\/local$/ {
      grok {
        patterns_dir   => "/usr/share/logstash/patterns.d"
        match          => [ "message", "^%{POSTFIX_LOCAL}$" ]
        tag_on_failure => [ "_grok_postfix_local_nomatch" ]
        add_tag        => [ "_grok_postfix_success" ]
      }
    } else if [program] =~ /^postfix.*\/master$/ {
      grok {
        patterns_dir   => "/usr/share/logstash/patterns.d"
        match          => [ "message", "^%{POSTFIX_MASTER}$" ]
        tag_on_failure => [ "_grok_postfix_master_nomatch" ]
        add_tag        => [ "_grok_postfix_success" ]
      }
    } else if [program] =~ /^postfix.*\/pickup$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/patterns.d"
            match          => [ "message", "^%{POSTFIX_PICKUP}$" ]
            tag_on_failure => [ "_grok_postfix_pickup_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/pipe$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/patterns.d"
            match          => [ "message", "^%{POSTFIX_PIPE}$" ]
            tag_on_failure => [ "_grok_postfix_pipe_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/postdrop$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/patterns.d"
            match          => [ "message", "^%{POSTFIX_POSTDROP}$" ]
            tag_on_failure => [ "_grok_postfix_postdrop_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/postscreen$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/patterns.d"
            match          => [ "message", "^%{POSTFIX_POSTSCREEN}$" ]
            tag_on_failure => [ "_grok_postfix_postscreen_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/qmgr$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/patterns.d"
            match          => [ "message", "^%{POSTFIX_QMGR}$" ]
            tag_on_failure => [ "_grok_postfix_qmgr_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/scache$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/patterns.d"
            match          => [ "message", "^%{POSTFIX_SCACHE}$" ]
            tag_on_failure => [ "_grok_postfix_scache_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/sendmail$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/patterns.d"
            match          => [ "message", "^%{POSTFIX_SENDMAIL}$" ]
            tag_on_failure => [ "_grok_postfix_sendmail_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    # Handle postfix smtpd and the normal smtp messages (these occur when an email is defered)
    } else if [program] =~ /^postfix.*\/smtp$/ or [program] == "smtp" {
        grok {
            patterns_dir   => "/usr/share/logstash/patterns.d"
            match          => [ "message", "^%{POSTFIX_SMTP}$" ]
            tag_on_failure => [ "_grok_postfix_smtp_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/lmtp$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/patterns.d"
            match          => [ "message", "^%{POSTFIX_LMTP}$" ]
            tag_on_failure => [ "_grok_postfix_lmtp_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    # Handle postfix smtpd and the normal smtpd messages (these occur when an email is defered)
    } else if [program] =~ /^postfix.*\/smtpd$/ or [program] == "smtpd" {
        grok {
            patterns_dir   => "/usr/share/logstash/patterns.d"
            match          => [ "message", "^%{POSTFIX_SMTPD}$" ]
            tag_on_failure => [ "_grok_postfix_smtpd_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/postsuper$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/patterns.d"
            match          => [ "message", "^%{POSTFIX_POSTSUPER}$" ]
            tag_on_failure => [ "_grok_postfix_postsuper_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/tlsmgr$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/patterns.d"
            match          => [ "message", "^%{POSTFIX_TLSMGR}$" ]
            tag_on_failure => [ "_grok_postfix_tlsmgr_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/tlsproxy$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/patterns.d"
            match          => [ "message", "^%{POSTFIX_TLSPROXY}$" ]
            tag_on_failure => [ "_grok_postfix_tlsproxy_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/trivial-rewrite$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/patterns.d"
            match          => [ "message", "^%{POSTFIX_TRIVIAL_REWRITE}$" ]
            tag_on_failure => [ "_grok_postfix_trivial_rewrite_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/discard$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/patterns.d"
            match          => [ "message", "^%{POSTFIX_DISCARD}$" ]
            tag_on_failure => [ "_grok_postfix_discard_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/virtual$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/patterns.d"
            match          => [ "message", "^%{POSTFIX_VIRTUAL}$" ]
            tag_on_failure => [ "_grok_postfix_virtual_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/postmap$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/patterns.d"
            match          => [ "message", "^%{POSTFIX_POSTMAP}$" ]
            tag_on_failure => [ "_grok_postfix_postmap_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/postfix-script$/ {
        grok {
            patterns_dir   => "/usr/share/logstash/patterns.d"
            match          => [ "message", "^%{POSTFIX_SCRIPT}$" ]
            tag_on_failure => [ "_grok_postfix_script_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*/ {
        mutate {
            add_tag => [ "_grok_postfix_program_nomatch" ]
        }
    }

    # process key-value data if it exists
    if [postfix_keyvalue_data] {
        kv {
            source       => "postfix_keyvalue_data"
            trim_value   => "<>,"
            prefix       => "postfix_keyvalue_"
            remove_field => [ "postfix_keyvalue_data" ]
        }

        # some post processing of key-value data
        if [postfix_keyvalue_client] {
            grok {
                patterns_dir   => "/usr/share/logstash/patterns.d"
                match          => ["postfix_keyvalue_client", "^%{POSTFIX_CLIENT_INFO}$"]
                remove_field   => [ "postfix_keyvalue_client" ]
                tag_on_failure => [ "_grok_kv_postfix_client_nomatch" ]
            }
        }
        if [postfix_keyvalue_relay] {
            grok {
                patterns_dir   => "/usr/share/logstash/patterns.d"
                match          => ["postfix_keyvalue_relay", "^%{POSTFIX_RELAY_INFO}$"]
                tag_on_failure => [ "_grok_kv_postfix_relay_nomatch" ]
                remove_field   => [ "postfix_keyvalue_relay" ]
            }
        }
        if [postfix_keyvalue_delays] {
            grok {
                patterns_dir   => "/usr/share/logstash/patterns.d"
                match          => ["postfix_keyvalue_delays", "^%{POSTFIX_DELAYS}$"]
                tag_on_failure => [ "_grok_kv_postfix_delays_nomatch" ]
                remove_field   => [ "postfix_keyvalue_delays" ]
            }
        }

        mutate {
          rename => { "postfix_keyvalue_to" => "[postfix][to]" }
          rename => { "postfix_keyvalue_from" => "[postfix][from]" }
          rename => { "postfix_keyvalue_nrcpt" => "[postfix][nrcpt]" }
          rename => { "postfix_keyvalue_size" => "[postfix][size]" }
          rename => { "postfix_keyvalue_delay" => "[postfix][delay][total]" }
          rename => { "postfix_keyvalue_from" => "[postfix][from]" }
          rename => { "postfix_keyvalue_dsn" => "[postfix][status][dsn]" }
          rename => { "postfix_keyvalue_proto" => "[postfix][proto]" }
          rename => { "postfix_keyvalue_ehlo" => "[postfix][helo]" }
          rename => { "postfix_keyvalue_helo" => "[postfix][helo]" }
          rename => { "postfix_keyvalue_sasl_method" => "[postfix][sasl][method]" }
          rename => { "postfix_keyvalue_sasl_username" => "[postfix][sasl][username]" }
          rename => { "postfix_keyvalue_orig_to" => "[postfix][orig_to]" }
        }
    }

    # process command counter data if it exists
    if [postfix][cmd_counter_data] {
        grok {
            patterns_dir   => "/usr/share/logstash/patterns.d"
            match          => ["[postfix][cmd][counter_data]", "^%{POSTFIX_COMMAND_COUNTER_DATA}$"]
            tag_on_failure => ["_grok_postfix_command_counter_data_nomatch"]
            remove_field   => ["[postfix][cmd_counter_data]"]
        }
    }

    # parse MIME subject
    if [postfix][subject] and [program] =~ /^postfix.*\/cleanup$/ {
        ruby {
            init => "require 'mail'"
            code => "event.set('[postfix][subject]', Mail::Encodings.value_decode(event.get('[postfix][subject]')))"
        }
    }

    # Do some data type conversions
    mutate {
        convert => [
          # list of integer fields
          "[postfix][anvil][cache_size]", "integer",
          "[postfix][anvil][conn_count]", "integer",
          "[postfix][anvil][conn_rate]", "integer",
          "[postfix][client][port]", "integer",
          "[postfix][cmd][counter_data]", "integer",
          "[postfix][cmd][auth][total]", "integer",
          "[postfix][cmd][auth][accepted]", "integer",
          "[postfix][cmd][count][total]", "integer",
          "[postfix][cmd][count][accepted]", "integer",
          "[postfix][cmd][data][total]", "integer",
          "[postfix][cmd][data][accepted]", "integer",
          "[postfix][cmd][ehlo][total]", "integer",
          "[postfix][cmd][ehlo][accepted]", "integer",
          "[postfix][cmd][helo][total]", "integer",
          "[postfix][cmd][helo][accepted]", "integer",
          "[postfix][cmd][mail][total]", "integer",
          "[postfix][cmd][mail][accepted]", "integer",
          "[postfix][cmd][quit][total]", "integer",
          "[postfix][cmd][quit][accepted]", "integer",
          "[postfix][cmd][rcpt][total]", "integer",
          "[postfix][cmd][rcpt][accepted]", "integer",
          "[postfix][cmd][rset][total]", "integer",
          "[postfix][cmd][rset][accepted]", "integer",
          "[postfix][cmd][starttls][total]", "integer",
          "[postfix][cmd][starttls][accepted]", "integer",
          "[postfix][cmd][unknown]", "integer",
          "[postfix][cmd][unknown][accepted]", "integer",
          "[postfix][postscreen][cache][dropped]", "integer",
          "[postfix][postscreen][cache][retained]", "integer",
          "[postfix][postscreen][dnsbl_rank]", "integer",
          "[postfix][relay][port]", "integer",
          "[postfix][server][port]", "integer",
          "[postfix][status][code]", "integer",
          "[postfix][termination_signal]", "integer",

          # list of float fields
          "[postfix][delay][total]", "float",
          "[postfix][delay][before_qmgr]", "float",
          "[postfix][delay][conn_setup]", "float",
          "[postfix][delay][in_qmgr]", "float",
          "[postfix][delay][transmission]", "float",
          "[postfix][postscreen][violation][time]", "float"
        ]
    }
  }
}